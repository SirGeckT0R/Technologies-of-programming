//Создать класс Item(единица хранения в библиотеке),
//содержащий данные - члены:
//invNumber - инвентарный номер и
//taken - взято на руки или имеется в наличии, а также методы :
//void Show(); //показать  информацию о единице хранения
//bool isAvailable(); // есть ли единица хранения в наличии ?
//int getInvNumber(); //возвращает инвентарный номер
//void take(); //  операция "взять"
//void toReturn(); //  операция "вернуть"
//virtual string toString();

//Стандартный класс string языка C++ Лафоре глава 7 стр. 296
#pragma once
#include <string>//Для string
using namespace std;//Для string

class Item
{
private:
	long int invNumber;//Инвентарный номер. По умолчанию значение произвольное
	bool taken;//Взято на руки (true) или имеется в наличии (false). По умолчанию true

protected:
	string bool_cast(const bool b);//Для преобразования переменной типа bool в string (true или false) 

public:
	Item();
	Item(long int invNumber);
	virtual ~Item(); //Виртуальный деструктор
//Деструкторы базового класса обязательно должны быть виртуальными.
//Допустим, чтобы удалить объект порожденного класса, вы выполнили
//delete над указателем базового класса, указывающим на порожденный класс.
//Если деструктор базового класса не является виртуальным, тогда delete, будучи
//обычным методом, вызовет деструктор для базового класса вместо того, чтобы
//запустить деструктор для порожденного класса.Это приведет к тому, что будет
//удалена только та часть объекта, которая относится к базовому классу.

	virtual void show(); //Показать  информацию о единице хранения. Будет перегружаемая функция
	//Если show сделать не виртуальной, то везде имя объекта будет Item, т.е. всегда будет вызываться show из Item.
	virtual string toString();//Информация о единице хранения в строке. Эта функция будет перегружена 
	bool isAvailable();// Есть ли единица хранения в наличии?
	int getInvNumber(); //Возвращает инвентарный номер
	void take(); //  Операция "взять"
	void returnItem(); //  Операция "вернуть"
};

